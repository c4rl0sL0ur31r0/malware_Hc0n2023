from pprint import pprint
import requests


class malbazaarApi:

    """ class construct api for MalwareBazaar """

    def __init__(self):
        self.url_bazaar = 'https://mb-api.abuse.ch/api/v1/'
        self.rsession = requests.Session()
        self.rsession.headers.update({'accept': 'application/json'})

    @staticmethod
    def __get_download_malware(hash_target, response, target_folder):
        """

        :param hash_target: sha256
        :param response:
        :param target_folder: malware_familie_folder
        :return:
        """
        open(target_folder + hash_target + '.zip', 'wb').write(response.content)

    def download_malware(self, sha256, target_folder):
        """
        Download malware ZIP infected
        :param sha256:
        :param target_folder:
        :return: file sample with password infected
        """
        params = {"query": "get_file", "sha256_hash": sha256}
        bazaarresponse = self.rsession.post(self.url_bazaar, data=params)
        # print(bazaarresponse.text)
        if 'file_not_found' in bazaarresponse.text:
            print("Error: file not found")
        else:
            print("Success: file Found !!")
            self.__get_download_malware(hash_target=sha256, response=bazaarresponse, target_folder=target_folder)

    def tag_search(self, tag):
        """
        limit: default 100, max 1000
        :param tag: tag to search
        :return: list (info from tag for intelligence)
        """
        params = {"query": "get_taginfo", "tag": tag, "limit": 50}
        return self.__make_api_call(params)



    def __make_api_call(self, params):
        """
        :param params: query
        :return: json query_status and data answers from query
        """
        response = self.rsession.post(self.url_bazaar, data=params)
        data = response.json()
        # status_query = data['query_status']
        return data
