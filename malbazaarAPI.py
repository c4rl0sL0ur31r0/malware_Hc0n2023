from pprint import pprint
from src.modules.misp.createObject import createObject
import requests


class malbazaarApi:

    """ class construct api for MalwareBazaar """

    def __init__(self):
        self.url_bazaar = 'https://mb-api.abuse.ch/api/v1/'
        self.rsession = requests.Session()
        self.rsession.headers.update({'accept': 'application/json'})
        # self.target_folder = readerConfig().get_malware_location()

    @staticmethod
    def __get_download_malware(hash_target, response, target_folder):
        """

        :param hash_target: sha256
        :param response:
        :param target_folder: malware_familie_folder
        :return:
        """
        open(target_folder + hash_target + '.zip', 'wb').write(response.content)

    def download_malware(self, sha256, target_folder):
        """
        Download malware ZIP infected
        :param sha256:
        :param target_folder:
        :return: file sample with password infected
        """
        params = {"query": "get_file", "sha256_hash": sha256}
        bazaarresponse = self.rsession.post(self.url_bazaar, data=params)
        # print(bazaarresponse.text)
        if 'file_not_found' in bazaarresponse.text:
            print("Error: file not found")
        else:
            print("Success: file Found !!")
            self.__get_download_malware(hash_target=sha256, response=bazaarresponse, target_folder=target_folder)

    def hash_search(self, hash_target):
        """

        :param hash_target: md5, sha1, sha256
        :return: hash info
        """
        params = {"query": "get_info", "hash": hash_target}
        return self.__make_api_call(params)

    def tag_search(self, tag):
        """
        limit: default 100, max 1000
        :param tag: tag to search
        :return: list (info from tag for intelligence)
        """
        params = {"query": "get_taginfo", "tag": tag, "limit": 50}
        return self.__make_api_call(params)

    def signature_search(self, signature):
        """
        limit: default 100, max 1000
        :param signature: search malware signature
        :return: malware signature info for correlate
        """
        params = {"query": "get_siginfo", "signature": signature, "limit": 50}
        return self.__make_api_call(params)

    def clamAv_search(self, clamAv_signature):
        """
        limit: default 100, max 1000
        :param clamAv_signature: like Doc.Downloader.Emotet-7580152-0
        :return:
        """
        params = {"query": "get_clamavinfo", "clamav": clamAv_signature, "limit": 50}
        return self.__make_api_call(params)

    def imphash_search(self, imphash):
        """
        limit: default 100, max 1000
        :param imphash:
        :return: return info from imphash
        """
        params = {"query": "get_imphash", "imphash": imphash, "limit": 50}
        self.__make_api_call(params)

    def tlsh_search(self, tlsh_target):
        """
        limit: default 100, max 1000
        :param tlsh_target:
        :return: info from tlsh
        """
        params = {"query": "get_tlsh", "tlsh": tlsh_target, "limit": 50}
        return self.__make_api_call(params)

    def telfhash_search(self, telfhash):
        """
        limit: default 100, max 1000
        :param telfhash:
        :return: info from telfhash
        """
        params = {"query": "get_tlsh", "telfhash": telfhash, "limit": 50}
        return self.__make_api_call(params)

    def yara_search(self, yara_rule):
        """
        limit: default 100, max 1000
        :param yara_rule:
        :return: yara rule
        """
        params = {"query": "get_yarainfo", "yara_rule": yara_rule, "limit": 50}
        return self.__make_api_call(params)

    def issuerCN_search(self, issuer_cn):
        """
        limit: default max 100
        :param issuer_cn:
        :return: issuer_CN info
        """
        params = {"query": "get_issuerinfo", "issuer_cn": issuer_cn}
        return self.__make_api_call(params)

    def subjectCN_search(self, subject_cn):
        """
        limit: default max 100
        :param subject_cn:
        :return:
        """
        params = {"query": "get_subjectinfo", "subject_cn": subject_cn}
        return self.__make_api_call(params)

    def search_dhash_icon(self, dhash):
        """
        limit default max 1000
        :param dhash: hash from icon
        :return: info from hash icon
        """
        params = {"query": "get_tlsh", "subject_cn": dhash, "limit": 1000}
        return self.__make_api_call(params)

    def __make_api_call(self, params):
        """
        :param params: query
        :return: json query_status and data answers from query
        """
        response = self.rsession.post(self.url_bazaar, data=params)
        data = response.json()
        # status_query = data['query_status']
        return data

    @staticmethod
    def parse_report(response):
        mapping = {'meaningful_name': {'type': 'filename', 'object_relation': 'filename'},
                   'file_size': {'type': 'size-in-bytes', 'object_relation': 'size-in-bytes'},
                   'file_type_mime': {'type': 'mime-type', 'object_relation': 'mimetype'},
                   'md5_hash': {'type': 'md5', 'object_relation': 'md5'},
                   'sha1_hash': {'type': 'sha1', 'object_relation': 'sha1'},
                   'sha256_hash': {'type': 'sha256', 'object_relation': 'sha256'},
                   'ssdeep': {'type': 'ssdeep', 'object_relation': 'ssdeep'}}
        misp_object = createObject().file_malware()
        for feature, attribute in mapping.items():
            if 'attributes' in response.keys():
                if feature in response['attributes']:
                    # print(feature, response['attributes'][feature])
                    misp_attribute = {'value': response['attributes'][feature]}
                    misp_attribute.update(attribute)
                    print(response['signature'])
                    misp_object.add_attribute(**misp_attribute).add_tag(response['signature'])
                # print(misp_object)
            else:
                if feature in response:
                    misp_attribute = {'value': response[feature]}
                    misp_attribute.update(attribute)
                    # print(misp_attribute)
                    misp_object.add_attribute(**misp_attribute).add_tag(response['signature'])
        # pprint(misp_object.jsonable())
        return misp_object


#data = malbazaarApi().hash_search(hash_target='45ecd17e98486502de6e6cfa5adedb3044fb5c7829dbfb8e0ffcce1001db8dbc')
#print(data)
# data = malbazaarApi().tag_search(tag='systembc')
#reportData = malbazaarApi().parse_report(response=data['data'][0])
#pprint(reportData.to_json())
